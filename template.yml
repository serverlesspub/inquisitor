AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Serverless Inquisitor, a simple app for testing latency
  between client devices, API Gateway and Lambda functions
Transform: AWS::Serverless-2016-10-31
Parameters:
  StageName:
    Type: String
    Default: "test"
    Description: API Stage name
  MemorySize:
    Type: Number
    Default: 128
    Description: Memory limit for the test Lambda function
  ProvisionedInstances:
    Type: Number
    Default: 0
    Description: >
      Number of provisioned instances of the test Lambda function. Leave as 0 for no provisioned instances.
Conditions:
  ProvisionedInstancesSet: !Not [ !Equals [0, !Ref ProvisionedInstances]]
Resources:
  RegionalRestApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: Regional
      StageName: !Ref StageName
      Cors:
        AllowCredentials: "'true'"
        AllowMethods: "'GET,OPTIONS,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  EdgeRestApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: Edge
      StageName: !Ref StageName
      Cors:
        AllowCredentials: "'true'"
        AllowMethods: "'GET,OPTIONS,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn: 
      - RegionalRestApiStage
      - EdgeRestApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref RegionalRestApi
          Stage: !Ref StageName
        - ApiId: !Ref EdgeRestApi
          Stage: !Ref StageName
      Quota:
        Limit: 10000
        Period: DAY
      Throttle:
        BurstLimit: 2000
        RateLimit: 1000
      UsagePlanName: !Sub "${StageName}Plan"

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn: 
      - RegionalRestApiStage
      - EdgeRestApiStage
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RegionalRestApi
          StageName: !Ref StageName
        - RestApiId: !Ref EdgeRestApi
          StageName: !Ref StageName

  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  SyncTestFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda.handler
      Runtime: nodejs12.x
      CodeUri: sync-test-function
      MemorySize: !Ref MemorySize
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If 
          - ProvisionedInstancesSet
          - ProvisionedConcurrentExecutions: !Ref ProvisionedInstances
          - Ref: AWS::NoValue
      Events:
        RegionalApiGet:
          Type: Api
          Properties:
            Method: get
            Path: /regional
            RestApiId: !Ref RegionalRestApi
        RegionalApiPost:
          Type: Api
          Properties:
            Method: post
            Path: /regional
            RestApiId: !Ref RegionalRestApi
        EdgeApiGet:
          Type: Api
          Properties:
            Method: get
            Path: /edge
            RestApiId: !Ref EdgeRestApi
        EdgeApiPost:
          Type: Api
          Properties:
            Method: post
            Path: /edge
            RestApiId: !Ref EdgeRestApi
        RegionalApiKeyGet:
          Type: Api
          Properties:
            Method: get
            Path: /regional-key
            RestApiId: !Ref RegionalRestApi
            Auth:
              ApiKeyRequired: true

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      AllowUnauthenticatedIdentities: true

  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !Ref SyncTestFunction.Alias

  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoUnAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html

  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.1

  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !GetAtt DeploymentLayer.Outputs.Arn
      CodeUri: web-site/
      AutoPublishAlias: live
      Runtime: python3.6 
      Handler: deployer.resource_handler
      Timeout: 600
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref WebsiteBucket
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"
      TargetBucket: !Ref WebsiteBucket
      Acl: 'public-read'
      CacheControlMaxAge: 600
      Substitutions:
        FilePattern: "*.html"
        Values:
          StackId: !Ref AWS::StackId
          Region: !Ref AWS::Region
          IdentityPoolId: !Ref IdentityPool
          ApiKeyId: !Ref ApiKey
          RegionalApiUrl: !Sub "https://${RegionalRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/regional"
          RegionalKeyApiUrl: !Sub "https://${RegionalRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/regional-key"
          EdgeApiUrl: !Sub "https://${EdgeRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/edge"
          SyncTestFunction: !Ref SyncTestFunction.Alias

Outputs:
  WebSiteUrl:
    Value: !GetAtt WebsiteBucket.WebsiteURL

Metadata:
  AWS::ServerlessRepo::Application:
    Name: inquisitor 
    Description: >
      Serverless Inquisitor, a simple app for testing latency
      between client devices, API Gateway and Lambda functions
    Author: Gojko Adzic
    SpdxLicenseId: MIT 
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README-SAR.md 
    Labels: ['testing']
    HomePageUrl: https://github.com/serverlesspub/inquisitor
    SemanticVersion: 1.0.2
    SourceCodeUrl: https://github.com/serverlesspub/inquisitor
